给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。
在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。返回 你能获得的 最大 利润 。

本题是经典的动态规划题，用两个状态转移方程可以将每天利润表示出来。用一个二维数组dp[][2]第一位表示当前遍历到哪一天的股价，第二位长度为2，只有1和0这两个状态，1表示这一天结束时持有股票。0表示未持有股票。
d[i][0]=max{dp[i-1][0],dp[i-1][1]+preces[i]}即当第i轮的结束时不持有股票，当前最大利润为上一轮结束没有持股与上轮结束持股本轮卖出两个值中较大值。
dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i])即当第i轮结束持有股票，当前最大利润为上一轮持有股票与上一轮未持有股票这一轮买入后较大值。
初始值dp[0][0]=0 ,dp[0][1]=-prices[0]要减去prices其实就相当于当日买入的成本，要从利润中扣除。


func maxProfit(prices []int) int {
	n := len(prices)
	dp := make([][2]int, n)
	dp[0][1] = -prices[0]
	dp[0][0] = 0
	for i := 1; i < n; i++ {
		dp[i][0] = max(dp[i-1][0], dp[i-1][1]+prices[i])
		dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i])
	}
	return dp[n-1][0]

}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
