判断两个字符串是不是同构的，可以直接把他们都转换为112 1123这种形式对比即可。但是string类型只能读取每一个字节，不能直接修改。
我们把每个字符读取出来用一个哈希表保存其中每个字母的词频，需要注意的是要用byte或者rune保存单个字节，没有中文就用byte即可。
用一个int的数组切片来保存两个字符串的模板，没有出现的字母就直接用循环的i，出现过的字母就在哈希表中找到对应字母的value。

最后将两个字符串的模板数组转换为字符串对比即可。

**********二次声明golang重点：字符串与字符串数组互转****************
go语言中string字符串，比如str：=“abcd”可以用str[1]来访问a，但是不能直接修改str[xxx]，也不能直接append（），因为不支持，但是可以用[:]来切割，切割后依然是string字符串。
如果要改变字符串中的值，就需要把他转化为数组切片再操作，可以直接利用强制转换，比如bytestr := []byte(str)或者有中文时转化为rune,修改后再string（）转回去。
当然上述字符串数组切片到字符串的互相转化也可以调用strings包的Split和Join来完成。

顺带在此强调，当一个字符串为str1：=“123” 此时需要用到123这个数字整体作为运算时，要调用专门的包strconv，因为强制类型转换时默认字符串都是ASCII码存储。
就比如str1作为一个字符串，不能直接用int（str1）转化为数字，如果直接用int（str1[0]）转123的1，也得到的是1对应的ASCII码，还要int（str1[0]-‘0’）操作。
更重要的是，如果现在有一个int数字123，不能直接用string转化为字符串，因为会将123当做ASCII码翻译为对应的字符。所以除非是需要获取字符串中某个特定位置的数字，都尽量用strconv包的Itoa和Atoi完成
