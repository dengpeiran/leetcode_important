给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。

题目非常好理解，也是一个非常巧妙的哈希表结合前缀和的题目：
首先nums只存放有1和0，共识的是当123位的和知道12345位的和知道，用第二个和减去第一个和就是子串45的和。当遇到1时加上1，遇到0时减去1，那么当一个和首次出现时，记录它出现的位置。
当这个和之前出现过，那么表明这个和首次出现的位置到现在出现的位置之间这一段子串和为0。
需要注意的是，为了保证循环简洁，在开始遍历前，把前缀-1的位置值记作0，这样后面再出现0时，也很显然就是从开头到在此出现0的位置最长。

func findMaxLength(nums []int) int {
	var max, count int
	m := make(map[int]int)
	m[0] = -1
	for i, v := range nums { //count记录0和1的差值，相等的count表明0和1的个数相等，那么i-m[count]就是一个连续的子数组
		if v == 0 {
			count--
		} else {
			count++
		}
		if _, ok := m[count]; ok { //如果存在count的key，说明count的值在i之前出现过，那么i-m[count]就是一个连续的子数组
			if max < i-m[count] {
				max = i - m[count]
			}
		} else {
			m[count] = i
		}
	}
	return max

}
