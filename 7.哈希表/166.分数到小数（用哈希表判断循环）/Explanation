用string来记录小数点后的所有余数，用一个哈希表记录一个被除数（key）出现的位置（value），要么被除数变成0，要么被除数在哈希表中已经存在，如果已经存在，那么之前该位置到现在的位置之间的小数就要循环。
每次将被除数*10除以除数加到保存小数的string后面，在求余数得到下一轮的被除数。这一点和整数部分其实是一样的，乘上10倍在除以除数，最后求余数得到下一次的除数。

package main

import "strconv"

func fractionToDecimal(numerator int, denominator int) string {
	//如果出现负数
	if numerator < 0 && denominator > 0 || numerator > 0 && denominator < 0 {
		return "-" + fractionToDecimal(abs(numerator), abs(denominator))
	}
	//整数部分
	integer := numerator / denominator
	//余数
	remainder := numerator % denominator

	//小数部分
	decimal := ""
	//余数出现的位置
	remainderIndex := make(map[int]int)
	//余数出现的位置
	index := 0
	for remainder != 0 {
		//如果余数在某一位置出现过，那么从该位置开始的小数就循环了
		if _, ok := remainderIndex[remainder]; ok {
			decimal = decimal[:remainderIndex[remainder]] + "(" + decimal[remainderIndex[remainder]:] + ")"
			break
		}
		remainderIndex[remainder] = index                //用哈希表记录当前余数出现的位置
		remainder *= 10                                  //余数乘以10,相当于小数点向右移动一位
		decimal += strconv.Itoa(remainder / denominator) //小数部分加上商
		remainder = remainder % denominator              //余数取余,余数为0时，小数部分就是最终结果
		index++

	}
	if decimal == "" {
		return strconv.Itoa(integer)
	}
	return strconv.Itoa(integer) + "." + decimal
}

func abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}
