翻转链表2是将链表中的一部分翻转,本题非常重要，但是有两个做法。

1.第一个做法是利用普通的翻转链表中的方法，先定位right和其前驱节点，left和其后继节点，然后切断要翻转的部分，直接给普通翻转完成，完成后重新连接起来。
整个过程比较长，但是思路较为简单，反转过程完全使用的是全反转的函数。

func reverseBetween(head *ListNode, l int, r int) *ListNode {
	if head == nil {
		return nil
	}
	dummy := &ListNode{Next: head} //虚拟头节点,方便处理
	lpre := dummy                  //pre指向left前一个节点
	for i := 0; i < l-1; i++ {
		lpre = lpre.Next
	}
	left := lpre.Next
	right := left
	for i := 0; i < r-l; i++ {
		right = right.Next
	}
	rnext := right.Next

	right.Next = nil
	lpre.Next = nil

	newList := reverse(left)

	lpre.Next = newList
	//找到反转后的尾节点
	tail2 := newList
	tail1 := lpre
	for tail2 != nil {
		tail1 = tail2
		tail2 = tail2.Next
	}

	tail1.Next = rnext

	return dummy.Next

}

func reverse(head *ListNode) *ListNode {
	var pre *ListNode
	for head != nil {
		temp := head.Next
		head.Next = pre
		pre = head
		head = temp
	}
	return pre
}




2.这一个做法主要是利用了穿针引线的方法，其核心部分是找到第一个反转节点的前驱节点后，一次性循环将节点逐个挪到指定位置。
其反转部分的思路是，pre位置不动，始终指向left位置的前驱。cur始终指向最开始的left节点，将其移动到最后一位为止。
需要注意的是temp只是每轮的临时变量，pre的next指针始终指向的是反转部分的第一个节点。

func reverseBetween(head *ListNode, left int, right int) *ListNode {
	if head == nil {
		return nil
	}
	dummy := &ListNode{Next: head} //虚拟头节点,方便处理
	pre := dummy                   //pre指向left前一个节点
	for i := 0; i < left-1; i++ {
		pre = pre.Next
	}
	cur := pre.Next
	for i := 0; i < right-left; i++ {
		tmp := cur.Next      //暂存一下cur当前的下一个节点
		cur.Next = tmp.Next
		tmp.Next = pre.Next
		pre.Next = tmp    //cur会牵着整个反转的部分掉头，pre的next记录着整个掉头部分的其中一个节点防止丢失
	}
	return dummy.Next

}
