虽然是乘积运算的问题，但是本质上还是前缀和问题。
计算所有字符的左乘积、右乘积都存入一个数组，那么最后每个数的左右乘积相乘就是结果。

func productExceptSelf(nums []int) []int {
	n := len(nums)
	res := make([]int, n)
	left := make([]int, n)
	right := make([]int, n)
	left[0] = 1
	right[n-1] = 1
	for i := 1; i < n; i++ {
		left[i] = left[i-1] * nums[i-1]
	}
	for i := n - 2; i >= 0; i-- {
		right[i] = right[i+1] * nums[i+1]
	}
	for i := 0; i < n; i++ {
		res[i] = left[i] * right[i]
	}
	return res

}
