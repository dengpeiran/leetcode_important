两种解题方案：
1.调换数组位置，将对应位置的数换到对应位置，然后不符合这个规则的地方就是消失的数字
func findDisappearedNumbers(nums []int) []int {
	for i := 0; i < len(nums); i++ {
		for nums[i] != i+1 && nums[i] != nums[nums[i]-1] { // 将nums[i]放到nums[i]-1的位置上
			nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]
		}
	}
	var res []int
	for i := 0; i < len(nums); i++ {
		if nums[i] != i+1 {
			res = append(res, i+1)
		}
	}
	return res

}
但是我觉得这个交换时间复杂度高并且容易死循环，所以用哈希表做第二个方案：
2.直接将数组中出现次数都记录下来，在从1到n遍历哈希表的key，对应value为空的就是一次都没有出现的：
func findDisappearedNumbers(nums []int) []int {
	//使用哈希表统计
	var res []int
	m := make(map[int]int)
	for _, v := range nums {
		m[v]++
	}
	for i := 1; i <= len(nums); i++ {
		if _, ok := m[i]; !ok {
			res = append(res, i)
		}
	}
	return res

}
