最大二叉树的本质是从根节点开始将最大的值依次放在根左右的位置上，既然是构造二叉树，就想到调用go结构体的构造函数,构造函数为&XXXX{val,*XXXX,*XXXX},此时的XXXX代表树结构体的名字。
那么递归就很容易，每次进入遇到此时数组为空就返回空，否则就找到数组中最大值，作为此节点的val，然后将数组以此值两边分开递归给构造函数的左右子树指针。
值得注意的是，go语言的数组切割[:]，当需要切割index的后半部分时，将index放在冒号后，并且index这一位会被切掉；当需要切割index和之前的部分时，需要把index+1放在冒号前，因为此时切割是会保留index这一位的，所以要从第一个需要保留的位开始。

my code：
type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

func constructMaximumBinaryTree(nums []int) *TreeNode {
	if len(nums) == 0 {
		return nil
	}
	max := nums[0]
	index := 0
	for i := 1; i < len(nums); i++ {
		if nums[i] > max {
			max = nums[i]
			index = i
		}
	}
	return &TreeNode{nums[index], constructMaximumBinaryTree(nums[:index]), constructMaximumBinaryTree(nums[index+1:])} //递归,调用结构体的构造函数
}
