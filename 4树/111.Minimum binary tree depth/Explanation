求最大深度时很简单的递归：
func maxDepth(root *TreeNode) int {
	if root == nil {
		return 0
    }
	return max(maxDepth(root.Left), maxDepth(root.Right)) + 1 //左右子树都不为空，取最小值

}

求最小深度时将Math.max换成Math.min即可，但要注意如果根节点的左或右子树为空的话是构不成子树的。而最小深度是要求从根节点到子树的。当左或右子树为空时，不符合要求。

my code：
func minDepth(root *TreeNode) int {
	if root == nil {
		return 0
	}
	if root.Left == nil && root.Right == nil {
		return 1
	}
	if root.Left == nil { //左子树为空，只需要考虑右子树
		return minDepth(root.Right) + 1
	}
	if root.Right == nil { //右子树为空，只需要考虑左子树
		return minDepth(root.Left) + 1
	}
	return min(minDepth(root.Left), minDepth(root.Right)) + 1 //左右子树都不为空，取最小值

}
