这一题的递归非常复杂并且巧妙，这也是为什么最后返回比较难理解，递归要尝试找到更长的同值路径，所以左右子树中需要传递一个较长的上来，那么递归返回值必须要是左右子树中目前还相连的最长同值路径之一。而用ans保存的是目前考虑左右相连后最长的一条同值路径，它可能不是最长的，就比如下面这棵树，读到第二排的5时，ans识别的最长是3，但是为了探索上面有没有更长的路径，需要向3节点返回一个2，这个2指的是第二排的5的右子树长度，如果把图中3和4都换成5，那么最长的ans会变成4.
       3
  5         4
5   5
      5
  
  
  
  
my code:
type TreeNode struct {
	Val   int
	Left  *TreeNode
	Right *TreeNode
}

func longestUnivaluePath(root *TreeNode) (ans int) {
	var dfs func(root *TreeNode) int
	dfs = func(root *TreeNode) int {
		if root == nil {
			return 0
		}
		Left := dfs(root.Left)
		Right := dfs(root.Right)
		Left1, Right1 := 0, 0
		if root.Left != nil && root.Left.Val == root.Val { //左子树的值和根节点的值相等
			Left1 = Left + 1 //左子树的路径长度+1
		}
		if root.Right != nil && root.Right.Val == root.Val { //右子树的值和根节点的值相等
			Right1 = Right + 1 //右子树的路径长度+1
		}
		ans = max(ans, Left1+Right1) //更新最大值,此时只有当前节点的值和左右子树的值相等时才有可能更新，此时更新的边的最大值，所以不存在root值重复加的问题
		return max(Left1, Right1)    //返回左右子树中较大的值，这也是此题最巧妙的地方，返回的是与当前根节点相连的边的最大值，以此向上试探有没有更大的值相连，所以要传递左右中较大的一个。而本同值最长路径已经保存在ans中了

	}
	dfs(root)
	return ans

}

func max(a int, b int) int {
	if a > b {
		return a
	} else {
		return b
	}

}
